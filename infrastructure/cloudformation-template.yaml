AWSTemplateFormatVersion: '2010-09-09'
Description: 'Real-time Video Processing Infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: real-time-video-processing
    Description: Name of the project
  
  Environment:
    Type: String
    Default: development
    AllowedValues: [development, staging, production]
    Description: Environment name

Resources:
  # S3 Bucket for video storage
  VideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-videos-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt VideoProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mp4
                  - Name: suffix
                    Value: .avi

  # Processed data bucket
  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-processed-${Environment}'
      VersioningConfiguration:
        Status: Enabled

  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${VideoBucket}/*'
                  - !Sub '${ProcessedDataBucket}/*'
        - PolicyName: KinesisAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource: !GetAtt VideoAnalyticsStream.Arn

  # Lambda function for video processing
  VideoProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-processor-${Environment}'
      Runtime: python3.9
      Handler: video_processor.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Hello from Lambda!')}
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          VIDEO_BUCKET: !Ref VideoBucket
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          KINESIS_STREAM: !Ref VideoAnalyticsStream

  # Permission for S3 to invoke Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VideoProcessorFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${VideoBucket}/*'

  # Kinesis Stream for real-time analytics
  VideoAnalyticsStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ProjectName}-analytics-${Environment}'
      ShardCount: 2
      RetentionPeriodHours: 24

  # DynamoDB table for metadata
  VideoMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-metadata-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: video_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: video_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # API Gateway for HTTP endpoints
  VideoProcessingAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api-${Environment}'
      Description: Real-time Video Processing API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  VideoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref VideoProcessingAPI
      ParentId: !GetAtt VideoProcessingAPI.RootResourceId
      PathPart: video

  # API Gateway Method
  ProcessVideoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref VideoProcessingAPI
      ResourceId: !Ref VideoResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VideoProcessorFunction.Arn}/invocations'

  # Permission for API Gateway to invoke Lambda
  APIInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VideoProcessorFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${VideoProcessingAPI}/*/POST/video'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProcessVideoMethod
    Properties:
      RestApiId: !Ref VideoProcessingAPI
      StageName: !Ref Environment

  # CloudFront Distribution for global delivery
  VideoDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub '${ProjectName} Video Distribution'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt VideoBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'
        PriceClass: PriceClass_100

  # CloudFront Origin Access Identity
  OriginAccessIdentity:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName}'

  # CloudWatch Log Group
  VideoProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-processor-${Environment}'
      RetentionInDays: 30

  # CloudWatch Dashboard
  VideoProcessingDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${VideoProcessorFunction}"],
                  [".", "Errors", ".", "."],
                  [".", "Duration", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Metrics"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Kinesis", "IncomingRecords", "StreamName", "${VideoAnalyticsStream}"],
                  [".", "OutgoingRecords", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Kinesis Stream Metrics"
              }
            }
          ]
        }

Outputs:
  VideoBucketName:
    Description: Name of the S3 bucket for videos
    Value: !Ref VideoBucket
    Export:
      Name: !Sub '${ProjectName}-video-bucket-${Environment}'

  ProcessedDataBucketName:
    Description: Name of the S3 bucket for processed data
    Value: !Ref ProcessedDataBucket
    Export:
      Name: !Sub '${ProjectName}-processed-bucket-${Environment}'

  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${VideoProcessingAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-api-endpoint-${Environment}'

  CloudFrontURL:
    Description: CloudFront distribution URL
    Value: !GetAtt VideoDistribution.DomainName
    Export:
      Name: !Sub '${ProjectName}-cloudfront-url-${Environment}'

  KinesisStreamName:
    Description: Kinesis stream name for analytics
    Value: !Ref VideoAnalyticsStream
    Export:
      Name: !Sub '${ProjectName}-kinesis-stream-${Environment}'
