version: '3.8'

services:
  # Main video processing application
  web:
    build: .
    container_name: video-processor-app
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - ./saved_frames:/app/saved_frames
      - ./models:/app/models
      - /dev/video0:/dev/video0  # Camera access on Linux
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-video-processing-bucket}
      - KINESIS_STREAM_NAME=${KINESIS_STREAM_NAME:-video-analytics-stream}
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped
    networks:
      - video-processing-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    devices:
      - /dev/video0:/dev/video0  # Camera device mapping
    privileged: true  # Required for camera access

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: video-processor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - video-processing-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: video-processor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/app/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - video-processing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model synchronization service
  model-sync:
    build: .
    container_name: video-processor-model-sync
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-video-processing-bucket}
    volumes:
      - ./models:/app/models
    networks:
      - video-processing-network
    command: python cloud_model_sync.py --action sync
    restart: "no"  # Run once only
    profiles: ["models"]  # Optional service

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: video-processor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - video-processing-network
    profiles: ["monitoring"]  # Optional service
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: video-processor-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - video-processing-network
    profiles: ["monitoring"]  # Optional service
    depends_on:
      - prometheus

networks:
  video-processing-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
